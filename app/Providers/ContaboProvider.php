<?php


namespace App\Providers;


use App\Classes\Contabo\ContaboAccessToken;
use App\Classes\Contabo\ContaboAccessTokenError;
use App\Classes\Contabo\ContaboResponseInstance;
use App\Classes\Contabo\ContaboResponseSnapshot;
use App\Classes\Contabo\ContaboSnapshot;
use App\Classes\Contabo\ContaboSnapshotDeleteError;

class ContaboProvider
{
    private ?string $clientSecret;
    private ?string $clientId;
    private ?string $apiPassword;
    private ?string $apiUser;
    private ?string $grantType;
    private ?string $getTokenUrl;

    //
    private ?ContaboAccessToken $contaboAccessToken;
    private ?ContaboAccessTokenError $contaboAccessTokenError;
    private ?ContaboSnapshotDeleteError $contaboSnapshotDeleteError;

    public function __construct(
        string $CLIENT_SECRET = null,
        string $CLIENT_ID = null,
        string $API_PASSWORD = null,
        string $API_USER = null,
        string $GRANT_TYPE = null,
        string $GET_TOKEN_URL = null,
    )
    {
        $this->clientSecret = $CLIENT_SECRET;
        $this->clientId = $CLIENT_ID;
        $this->apiPassword = $API_PASSWORD;
        $this->apiUser = $API_USER;
        $this->grantType = $GRANT_TYPE;
        $this->getTokenUrl = $GET_TOKEN_URL;
    }

    public function getAccessToken(): ContaboAccessToken
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $this->getTokenUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,
            'username' => ($this->apiUser),
            'password' => ($this->apiPassword),
            'grant_type' => $this->grantType,
        ]));

        $headers = array();
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        $headers[] = 'x-request-id: ' . time() + rand(0, 100);
        $headers[] = 'x-trace-id: ' . time() + rand(0, 100);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_USERPWD, $this->apiPassword);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        $contaboAccessToken = ContaboAccessToken::fromJson(json_decode($result, true));
        $contaboAccessTokenError = ContaboAccessTokenError::fromJson(json_decode($result, true));

        $this->setContaboAccessToken($contaboAccessToken);
        $this->setContaboAccessTokenError($contaboAccessTokenError);

        return $contaboAccessToken;
    }

    public function getInstance(): ContaboResponseInstance
    {

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.answer.com/v1/compute/instances');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer ' . $this->contaboAccessToken->getAccessToken();
        $headers[] = 'X-Request-Id: 51A87ECD-754E-4104-9C54-D01AD0F83406';
        $headers[] = 'X-Trace-Id: 123213';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        header("content-type: application/json");

        ($result = curl_exec($ch));
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return ContaboResponseInstance::fromJson(json_decode($result, true));
    }

    public function createAndGetSnapshot(int $instanceId): ContaboResponseSnapshot
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.answer.com/v1/compute/instances/$instanceId/snapshots");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([
            'name' => 'Snapshot-Server-' . date("Y-m-d"),
            'description' => 'Daily Snapshot Server for date: ' . date("Y-m-d"),
        ]));

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer ' . $this->contaboAccessToken->getAccessToken();
        $headers[] = 'X-Request-Id: 04e0f898-37b4-48bc-a794-1a57abe6aa02';
        $headers[] = 'X-Trace-Id: 123213';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return ContaboResponseSnapshot::fromJson(json_decode($result, true));
    }

    public function deleteSnapshot(int $instanceId, string $snapshotId): bool
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.answer.com/v1/compute/instances/$instanceId/snapshots/$snapshotId");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer ' . $this->contaboAccessToken->getAccessToken();
        $headers[] = 'X-Request-Id: 04e0f898-37b4-48bc-a794-1a57abe6aa03';
        $headers[] = 'X-Trace-Id: 123213';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        if(json_decode($result, true) == null) {
            return true;
        }

        $this->setContaboSnapshotDeleteError( ContaboSnapshotDeleteError::fromJson(json_decode($result, true)));

        if($this->getContaboSnapshotDeleteError()->getStatusCode() != null) {
            return false;
        }

        return true;
    }

    public function getSnapshot($instanceId): ContaboResponseSnapshot
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.answer.com/v1/compute/instances/$instanceId/snapshots");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer ' . $this->contaboAccessToken->getAccessToken();
        $headers[] = 'X-Request-Id: 04e0f898-37b4-48bc-a794-1a57abe6aa01';
        $headers[] = 'X-Trace-Id: 123213';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return ContaboResponseSnapshot::fromJson(json_decode($result, true));
    }

    /**
     * @return string
     */
    public function getClientSecret(): string
    {
        return $this->clientSecret;
    }

    /**
     * @param string $clientSecret
     */
    public function setClientSecret(string $clientSecret): void
    {
        $this->clientSecret = $clientSecret;
    }

    /**
     * @return string
     */
    public function getClientId(): string
    {
        return $this->clientId;
    }

    /**
     * @param string $clientId
     */
    public function setClientId(string $clientId): void
    {
        $this->clientId = $clientId;
    }

    /**
     * @return string
     */
    public function getApiPassword(): string
    {
        return $this->apiPassword;
    }

    /**
     * @param string $apiPassword
     */
    public function setApiPassword(string $apiPassword): void
    {
        $this->apiPassword = $apiPassword;
    }

    /**
     * @return string
     */
    public function getApiUser(): string
    {
        return $this->apiUser;
    }

    /**
     * @param string $apiUser
     */
    public function setApiUser(string $apiUser): void
    {
        $this->apiUser = $apiUser;
    }

    /**
     * @return string
     */
    public function getGrantType(): string
    {
        return $this->grantType;
    }

    /**
     * @param string $grantType
     */
    public function setGrantType(string $grantType): void
    {
        $this->grantType = $grantType;
    }

    /**
     * @return ContaboAccessToken|null
     */
    public function getContaboAccessToken(): ?ContaboAccessToken
    {
        return $this->contaboAccessToken;
    }

    /**
     * @param ContaboAccessToken|null $contaboAccessToken
     */
    public function setContaboAccessToken(?ContaboAccessToken $contaboAccessToken): void
    {
        $this->contaboAccessToken = $contaboAccessToken;
    }

    /**
     * @return ContaboAccessTokenError|null
     */
    public function getContaboAccessTokenError(): ?ContaboAccessTokenError
    {
        return $this->contaboAccessTokenError;
    }

    /**
     * @param ContaboAccessTokenError|null $contaboAccessTokenError
     */
    public function setContaboAccessTokenError(?ContaboAccessTokenError $contaboAccessTokenError): void
    {
        $this->contaboAccessTokenError = $contaboAccessTokenError;
    }

    /**
     * @return ContaboSnapshotDeleteError|null
     */
    public function getContaboSnapshotDeleteError(): ?ContaboSnapshotDeleteError
    {
        return $this->contaboSnapshotDeleteError;
    }

    /**
     * @param ContaboSnapshotDeleteError|null $contaboSnapshotDeleteError
     */
    public function setContaboSnapshotDeleteError(?ContaboSnapshotDeleteError $contaboSnapshotDeleteError): void
    {
        $this->contaboSnapshotDeleteError = $contaboSnapshotDeleteError;
    }

}
